-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fast_accel_fast_accel_Pipeline_VITIS_LOOP_184_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln184 : IN STD_LOGIC_VECTOR (61 downto 0);
    IMG_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_0_ce0 : OUT STD_LOGIC;
    IMG_0_we0 : OUT STD_LOGIC;
    IMG_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_1_ce0 : OUT STD_LOGIC;
    IMG_1_we0 : OUT STD_LOGIC;
    IMG_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_2_ce0 : OUT STD_LOGIC;
    IMG_2_we0 : OUT STD_LOGIC;
    IMG_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_3_ce0 : OUT STD_LOGIC;
    IMG_3_we0 : OUT STD_LOGIC;
    IMG_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_4_ce0 : OUT STD_LOGIC;
    IMG_4_we0 : OUT STD_LOGIC;
    IMG_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_5_ce0 : OUT STD_LOGIC;
    IMG_5_we0 : OUT STD_LOGIC;
    IMG_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_6_ce0 : OUT STD_LOGIC;
    IMG_6_we0 : OUT STD_LOGIC;
    IMG_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_7_ce0 : OUT STD_LOGIC;
    IMG_7_we0 : OUT STD_LOGIC;
    IMG_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_8_ce0 : OUT STD_LOGIC;
    IMG_8_we0 : OUT STD_LOGIC;
    IMG_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_9_ce0 : OUT STD_LOGIC;
    IMG_9_we0 : OUT STD_LOGIC;
    IMG_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_10_ce0 : OUT STD_LOGIC;
    IMG_10_we0 : OUT STD_LOGIC;
    IMG_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_11_ce0 : OUT STD_LOGIC;
    IMG_11_we0 : OUT STD_LOGIC;
    IMG_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_12_ce0 : OUT STD_LOGIC;
    IMG_12_we0 : OUT STD_LOGIC;
    IMG_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_13_ce0 : OUT STD_LOGIC;
    IMG_13_we0 : OUT STD_LOGIC;
    IMG_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_14_ce0 : OUT STD_LOGIC;
    IMG_14_we0 : OUT STD_LOGIC;
    IMG_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_15_ce0 : OUT STD_LOGIC;
    IMG_15_we0 : OUT STD_LOGIC;
    IMG_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_16_ce0 : OUT STD_LOGIC;
    IMG_16_we0 : OUT STD_LOGIC;
    IMG_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_17_ce0 : OUT STD_LOGIC;
    IMG_17_we0 : OUT STD_LOGIC;
    IMG_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_18_ce0 : OUT STD_LOGIC;
    IMG_18_we0 : OUT STD_LOGIC;
    IMG_18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_19_ce0 : OUT STD_LOGIC;
    IMG_19_we0 : OUT STD_LOGIC;
    IMG_19_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_20_ce0 : OUT STD_LOGIC;
    IMG_20_we0 : OUT STD_LOGIC;
    IMG_20_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_21_ce0 : OUT STD_LOGIC;
    IMG_21_we0 : OUT STD_LOGIC;
    IMG_21_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_22_ce0 : OUT STD_LOGIC;
    IMG_22_we0 : OUT STD_LOGIC;
    IMG_22_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_23_ce0 : OUT STD_LOGIC;
    IMG_23_we0 : OUT STD_LOGIC;
    IMG_23_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_24_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_24_ce0 : OUT STD_LOGIC;
    IMG_24_we0 : OUT STD_LOGIC;
    IMG_24_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_25_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_25_ce0 : OUT STD_LOGIC;
    IMG_25_we0 : OUT STD_LOGIC;
    IMG_25_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    IMG_26_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    IMG_26_ce0 : OUT STD_LOGIC;
    IMG_26_we0 : OUT STD_LOGIC;
    IMG_26_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fast_accel_fast_accel_Pipeline_VITIS_LOOP_184_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_1B : STD_LOGIC_VECTOR (14 downto 0) := "000000000011011";
    constant ap_const_lv30_97B5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001001011110110101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln184_reg_702 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln184_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal gmem_addr_read_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln186_fu_588_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln186_reg_737 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln186_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_urem_fu_166 : STD_LOGIC_VECTOR (14 downto 0);
    signal idx_urem_fu_607_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal phi_mul_fu_170 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln186_fu_623_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_fu_174 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln184_fu_568_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (14 downto 0);
    signal next_urem_fu_595_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_24_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_629_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fast_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fast_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln184_fu_562_p2 = ap_const_lv1_0))) then 
                    i_fu_174 <= add_ln184_fu_568_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_174 <= ap_const_lv15_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    phi_mul_fu_170 <= ap_const_lv30_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    phi_mul_fu_170 <= add_ln186_fu_623_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_urem_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_urem_fu_166 <= ap_const_lv15_0;
                elsif (((icmp_ln184_reg_702 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    phi_urem_fu_166 <= idx_urem_fu_607_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln184_reg_702 <= icmp_ln184_fu_562_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln184_reg_702 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_read_reg_706 <= m_axi_gmem_RDATA;
                trunc_ln186_reg_737 <= trunc_ln186_fu_588_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    IMG_0_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_0_ce0 <= ap_const_logic_1;
        else 
            IMG_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_0_d0 <= gmem_addr_read_reg_706;

    IMG_0_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_0_we0 <= ap_const_logic_1;
        else 
            IMG_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_10_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_10_ce0 <= ap_const_logic_1;
        else 
            IMG_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_10_d0 <= gmem_addr_read_reg_706;

    IMG_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_A) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_10_we0 <= ap_const_logic_1;
        else 
            IMG_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_11_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_11_ce0 <= ap_const_logic_1;
        else 
            IMG_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_11_d0 <= gmem_addr_read_reg_706;

    IMG_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_B) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_11_we0 <= ap_const_logic_1;
        else 
            IMG_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_12_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_12_ce0 <= ap_const_logic_1;
        else 
            IMG_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_12_d0 <= gmem_addr_read_reg_706;

    IMG_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_C) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_12_we0 <= ap_const_logic_1;
        else 
            IMG_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_13_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_13_ce0 <= ap_const_logic_1;
        else 
            IMG_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_13_d0 <= gmem_addr_read_reg_706;

    IMG_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_D) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_13_we0 <= ap_const_logic_1;
        else 
            IMG_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_14_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_14_ce0 <= ap_const_logic_1;
        else 
            IMG_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_14_d0 <= gmem_addr_read_reg_706;

    IMG_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_E) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_14_we0 <= ap_const_logic_1;
        else 
            IMG_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_15_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_15_ce0 <= ap_const_logic_1;
        else 
            IMG_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_15_d0 <= gmem_addr_read_reg_706;

    IMG_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_F) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_15_we0 <= ap_const_logic_1;
        else 
            IMG_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_16_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_16_ce0 <= ap_const_logic_1;
        else 
            IMG_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_16_d0 <= gmem_addr_read_reg_706;

    IMG_16_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_10) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_16_we0 <= ap_const_logic_1;
        else 
            IMG_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_17_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_17_ce0 <= ap_const_logic_1;
        else 
            IMG_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_17_d0 <= gmem_addr_read_reg_706;

    IMG_17_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_11) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_17_we0 <= ap_const_logic_1;
        else 
            IMG_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_18_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_18_ce0 <= ap_const_logic_1;
        else 
            IMG_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_18_d0 <= gmem_addr_read_reg_706;

    IMG_18_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_12) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_18_we0 <= ap_const_logic_1;
        else 
            IMG_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_19_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_19_ce0 <= ap_const_logic_1;
        else 
            IMG_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_19_d0 <= gmem_addr_read_reg_706;

    IMG_19_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_19_we0 <= ap_const_logic_1;
        else 
            IMG_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_1_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_1_ce0 <= ap_const_logic_1;
        else 
            IMG_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_1_d0 <= gmem_addr_read_reg_706;

    IMG_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_1_we0 <= ap_const_logic_1;
        else 
            IMG_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_20_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_20_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_20_ce0 <= ap_const_logic_1;
        else 
            IMG_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_20_d0 <= gmem_addr_read_reg_706;

    IMG_20_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_14) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_20_we0 <= ap_const_logic_1;
        else 
            IMG_20_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_21_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_21_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_21_ce0 <= ap_const_logic_1;
        else 
            IMG_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_21_d0 <= gmem_addr_read_reg_706;

    IMG_21_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_15) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_21_we0 <= ap_const_logic_1;
        else 
            IMG_21_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_22_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_22_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_22_ce0 <= ap_const_logic_1;
        else 
            IMG_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_22_d0 <= gmem_addr_read_reg_706;

    IMG_22_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_16) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_22_we0 <= ap_const_logic_1;
        else 
            IMG_22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_23_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_23_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_23_ce0 <= ap_const_logic_1;
        else 
            IMG_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_23_d0 <= gmem_addr_read_reg_706;

    IMG_23_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_23_we0 <= ap_const_logic_1;
        else 
            IMG_23_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_24_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_24_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_24_ce0 <= ap_const_logic_1;
        else 
            IMG_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_24_d0 <= gmem_addr_read_reg_706;

    IMG_24_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_18) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_24_we0 <= ap_const_logic_1;
        else 
            IMG_24_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_25_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_25_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_25_ce0 <= ap_const_logic_1;
        else 
            IMG_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_25_d0 <= gmem_addr_read_reg_706;

    IMG_25_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_19) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_25_we0 <= ap_const_logic_1;
        else 
            IMG_25_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_26_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_26_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_26_ce0 <= ap_const_logic_1;
        else 
            IMG_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_26_d0 <= gmem_addr_read_reg_706;

    IMG_26_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((trunc_ln186_reg_737 = ap_const_lv5_1A) or ((trunc_ln186_reg_737 = ap_const_lv5_1B) or ((trunc_ln186_reg_737 = ap_const_lv5_1C) or ((trunc_ln186_reg_737 = ap_const_lv5_1D) or ((trunc_ln186_reg_737 = ap_const_lv5_1E) or (trunc_ln186_reg_737 = ap_const_lv5_1F)))))))) then 
            IMG_26_we0 <= ap_const_logic_1;
        else 
            IMG_26_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_2_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_2_ce0 <= ap_const_logic_1;
        else 
            IMG_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_2_d0 <= gmem_addr_read_reg_706;

    IMG_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_2_we0 <= ap_const_logic_1;
        else 
            IMG_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_3_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_3_ce0 <= ap_const_logic_1;
        else 
            IMG_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_3_d0 <= gmem_addr_read_reg_706;

    IMG_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_3_we0 <= ap_const_logic_1;
        else 
            IMG_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_4_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_4_ce0 <= ap_const_logic_1;
        else 
            IMG_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_4_d0 <= gmem_addr_read_reg_706;

    IMG_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_4_we0 <= ap_const_logic_1;
        else 
            IMG_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_5_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_5_ce0 <= ap_const_logic_1;
        else 
            IMG_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_5_d0 <= gmem_addr_read_reg_706;

    IMG_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_5_we0 <= ap_const_logic_1;
        else 
            IMG_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_6_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_6_ce0 <= ap_const_logic_1;
        else 
            IMG_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_6_d0 <= gmem_addr_read_reg_706;

    IMG_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_6_we0 <= ap_const_logic_1;
        else 
            IMG_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_7_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_7_ce0 <= ap_const_logic_1;
        else 
            IMG_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_7_d0 <= gmem_addr_read_reg_706;

    IMG_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_7_we0 <= ap_const_logic_1;
        else 
            IMG_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_8_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_8_ce0 <= ap_const_logic_1;
        else 
            IMG_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_8_d0 <= gmem_addr_read_reg_706;

    IMG_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_8) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_8_we0 <= ap_const_logic_1;
        else 
            IMG_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_9_address0 <= zext_ln186_fu_639_p1(10 - 1 downto 0);

    IMG_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_9_ce0 <= ap_const_logic_1;
        else 
            IMG_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    IMG_9_d0 <= gmem_addr_read_reg_706;

    IMG_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, trunc_ln186_reg_737)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln186_reg_737 = ap_const_lv5_9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            IMG_9_we0 <= ap_const_logic_1;
        else 
            IMG_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln184_fu_568_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv15_1));
    add_ln186_fu_623_p2 <= std_logic_vector(unsigned(phi_mul_fu_170) + unsigned(ap_const_lv30_97B5));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, icmp_ln184_reg_702)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln184_reg_702 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, icmp_ln184_reg_702)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln184_reg_702 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_gmem_RVALID, icmp_ln184_reg_702)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln184_reg_702 = ap_const_lv1_0) and (m_axi_gmem_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln184_fu_562_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln184_fu_562_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln184_reg_702, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln184_reg_702 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_174)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv15_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_174;
        end if; 
    end process;

    empty_24_fu_601_p2 <= "1" when (unsigned(next_urem_fu_595_p2) < unsigned(ap_const_lv15_1B)) else "0";

    gmem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_RVALID, icmp_ln184_reg_702, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln184_reg_702 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln184_fu_562_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv15_4000) else "0";
    idx_urem_fu_607_p3 <= 
        next_urem_fu_595_p2 when (empty_24_fu_601_p2(0) = '1') else 
        ap_const_lv15_0;
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln184_reg_702, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln184_reg_702 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    next_urem_fu_595_p2 <= std_logic_vector(unsigned(phi_urem_fu_166) + unsigned(ap_const_lv15_1));
    tmp_fu_629_p4 <= phi_mul_fu_170(29 downto 20);
    trunc_ln186_fu_588_p1 <= phi_urem_fu_166(5 - 1 downto 0);
    zext_ln186_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_629_p4),64));
end behav;
