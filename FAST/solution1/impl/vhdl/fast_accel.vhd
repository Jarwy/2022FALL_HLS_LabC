-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fast_accel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of fast_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fast_accel_fast_accel,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.655250,HLS_SYN_LAT=16404,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2717,HLS_SYN_LUT=2390,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_7E80 : STD_LOGIC_VECTOR (14 downto 0) := "111111010000000";
    constant ap_const_lv15_3D00 : STD_LOGIC_VECTOR (14 downto 0) := "011110100000000";
    constant ap_const_lv15_7F : STD_LOGIC_VECTOR (14 downto 0) := "000000001111111";
    constant ap_const_lv15_7E : STD_LOGIC_VECTOR (14 downto 0) := "000000001111110";
    constant ap_const_lv15_7D : STD_LOGIC_VECTOR (14 downto 0) := "000000001111101";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal img_in : STD_LOGIC_VECTOR (31 downto 0);
    signal threshold : STD_LOGIC_VECTOR (31 downto 0);
    signal img_out : STD_LOGIC_VECTOR (31 downto 0);
    signal img_out_ap_vld : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_read_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln48_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln48_reg_283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_reg_288_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_288_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln136_reg_297_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_13_reg_302 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_14_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_15_reg_312 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_17_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_19_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_phi_mux_phi_ln48_phi_fu_112_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter19_phi_ln48_reg_109 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_23_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln23_fu_148_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln26_fu_154_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_166_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_1_fu_162_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln136_fu_171_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln15_fu_188_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal empty_16_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_18_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_22_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_1_fu_252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln136_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_166_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component fast_accel_srem_15ns_32ns_15_19_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component fast_accel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        img_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        threshold : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_out : IN STD_LOGIC_VECTOR (31 downto 0);
        img_out_ap_vld : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component fast_accel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        img_in => img_in,
        threshold => threshold,
        img_out => img_out,
        img_out_ap_vld => img_out_ap_vld,
        rows => rows,
        cols => cols,
        ap_local_deadlock => ap_local_deadlock);

    srem_15ns_32ns_15_19_1_U1 : component fast_accel_srem_15ns_32ns_15_19_1
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 32,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_166_p0,
        din1 => rows_read_reg_278,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_86 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_fu_142_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_fu_86 <= add_ln23_fu_148_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_288_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_13_reg_302 <= empty_13_fu_192_p2;
                empty_14_reg_307 <= empty_14_fu_198_p2;
                empty_15_reg_312 <= empty_15_fu_204_p2;
                empty_17_reg_317 <= empty_17_fu_210_p2;
                empty_19_reg_322 <= empty_19_fu_216_p2;
                empty_21_reg_327 <= empty_21_fu_222_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln23_fu_142_p2 = ap_const_lv1_0))) then
                icmp_ln136_reg_297 <= icmp_ln136_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln136_reg_297_pp0_iter10_reg <= icmp_ln136_reg_297_pp0_iter9_reg;
                icmp_ln136_reg_297_pp0_iter11_reg <= icmp_ln136_reg_297_pp0_iter10_reg;
                icmp_ln136_reg_297_pp0_iter12_reg <= icmp_ln136_reg_297_pp0_iter11_reg;
                icmp_ln136_reg_297_pp0_iter13_reg <= icmp_ln136_reg_297_pp0_iter12_reg;
                icmp_ln136_reg_297_pp0_iter14_reg <= icmp_ln136_reg_297_pp0_iter13_reg;
                icmp_ln136_reg_297_pp0_iter15_reg <= icmp_ln136_reg_297_pp0_iter14_reg;
                icmp_ln136_reg_297_pp0_iter16_reg <= icmp_ln136_reg_297_pp0_iter15_reg;
                icmp_ln136_reg_297_pp0_iter17_reg <= icmp_ln136_reg_297_pp0_iter16_reg;
                icmp_ln136_reg_297_pp0_iter18_reg <= icmp_ln136_reg_297_pp0_iter17_reg;
                icmp_ln136_reg_297_pp0_iter2_reg <= icmp_ln136_reg_297_pp0_iter1_reg;
                icmp_ln136_reg_297_pp0_iter3_reg <= icmp_ln136_reg_297_pp0_iter2_reg;
                icmp_ln136_reg_297_pp0_iter4_reg <= icmp_ln136_reg_297_pp0_iter3_reg;
                icmp_ln136_reg_297_pp0_iter5_reg <= icmp_ln136_reg_297_pp0_iter4_reg;
                icmp_ln136_reg_297_pp0_iter6_reg <= icmp_ln136_reg_297_pp0_iter5_reg;
                icmp_ln136_reg_297_pp0_iter7_reg <= icmp_ln136_reg_297_pp0_iter6_reg;
                icmp_ln136_reg_297_pp0_iter8_reg <= icmp_ln136_reg_297_pp0_iter7_reg;
                icmp_ln136_reg_297_pp0_iter9_reg <= icmp_ln136_reg_297_pp0_iter8_reg;
                icmp_ln23_reg_288_pp0_iter10_reg <= icmp_ln23_reg_288_pp0_iter9_reg;
                icmp_ln23_reg_288_pp0_iter11_reg <= icmp_ln23_reg_288_pp0_iter10_reg;
                icmp_ln23_reg_288_pp0_iter12_reg <= icmp_ln23_reg_288_pp0_iter11_reg;
                icmp_ln23_reg_288_pp0_iter13_reg <= icmp_ln23_reg_288_pp0_iter12_reg;
                icmp_ln23_reg_288_pp0_iter14_reg <= icmp_ln23_reg_288_pp0_iter13_reg;
                icmp_ln23_reg_288_pp0_iter15_reg <= icmp_ln23_reg_288_pp0_iter14_reg;
                icmp_ln23_reg_288_pp0_iter16_reg <= icmp_ln23_reg_288_pp0_iter15_reg;
                icmp_ln23_reg_288_pp0_iter17_reg <= icmp_ln23_reg_288_pp0_iter16_reg;
                icmp_ln23_reg_288_pp0_iter18_reg <= icmp_ln23_reg_288_pp0_iter17_reg;
                icmp_ln23_reg_288_pp0_iter2_reg <= icmp_ln23_reg_288_pp0_iter1_reg;
                icmp_ln23_reg_288_pp0_iter3_reg <= icmp_ln23_reg_288_pp0_iter2_reg;
                icmp_ln23_reg_288_pp0_iter4_reg <= icmp_ln23_reg_288_pp0_iter3_reg;
                icmp_ln23_reg_288_pp0_iter5_reg <= icmp_ln23_reg_288_pp0_iter4_reg;
                icmp_ln23_reg_288_pp0_iter6_reg <= icmp_ln23_reg_288_pp0_iter5_reg;
                icmp_ln23_reg_288_pp0_iter7_reg <= icmp_ln23_reg_288_pp0_iter6_reg;
                icmp_ln23_reg_288_pp0_iter8_reg <= icmp_ln23_reg_288_pp0_iter7_reg;
                icmp_ln23_reg_288_pp0_iter9_reg <= icmp_ln23_reg_288_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln136_reg_297_pp0_iter1_reg <= icmp_ln136_reg_297;
                icmp_ln23_reg_288 <= icmp_ln23_fu_142_p2;
                icmp_ln23_reg_288_pp0_iter1_reg <= icmp_ln23_reg_288;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                rows_read_reg_278 <= rows;
                xor_ln48_reg_283 <= xor_ln48_fu_128_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln23_fu_142_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_fu_142_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln23_fu_142_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln136_fu_171_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_162_p1) + unsigned(ap_const_lv15_7E80));
    add_ln23_fu_148_p2 <= std_logic_vector(unsigned(i_fu_86) + unsigned(ap_const_lv15_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state22_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln23_fu_142_p2)
    begin
        if ((icmp_ln23_fu_142_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_phi_mux_phi_ln48_phi_fu_112_p4_assign_proc : process(icmp_ln23_reg_288_pp0_iter18_reg, ap_phi_reg_pp0_iter19_phi_ln48_reg_109, empty_23_fu_247_p2)
    begin
        if ((icmp_ln23_reg_288_pp0_iter18_reg = ap_const_lv1_0)) then
            if ((empty_23_fu_247_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_phi_ln48_phi_fu_112_p4 <= ap_const_lv1_1;
            elsif ((empty_23_fu_247_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_phi_ln48_phi_fu_112_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_phi_ln48_phi_fu_112_p4 <= ap_phi_reg_pp0_iter19_phi_ln48_reg_109;
            end if;
        else 
            ap_phi_mux_phi_ln48_phi_fu_112_p4 <= ap_phi_reg_pp0_iter19_phi_ln48_reg_109;
        end if; 
    end process;

    ap_phi_reg_pp0_iter19_phi_ln48_reg_109 <= "X";

    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_13_fu_192_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_7F) else "0";
    empty_14_fu_198_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_7E) else "0";
    empty_15_fu_204_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_7D) else "0";
    empty_16_fu_228_p2 <= (empty_14_reg_307 or empty_13_reg_302);
    empty_17_fu_210_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_2) else "0";
    empty_18_fu_232_p2 <= (empty_16_fu_228_p2 or empty_15_reg_312);
    empty_19_fu_216_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_1) else "0";
    empty_20_fu_237_p2 <= (empty_18_fu_232_p2 or empty_17_reg_317);
    empty_21_fu_222_p2 <= "1" when (trunc_ln15_fu_188_p1 = ap_const_lv15_0) else "0";
    empty_22_fu_242_p2 <= (empty_20_fu_237_p2 or empty_19_reg_322);
    empty_23_fu_247_p2 <= (empty_22_fu_242_p2 or empty_21_reg_327);
    grp_fu_166_p0 <= grp_fu_166_p00(15 - 1 downto 0);
    grp_fu_166_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln26_fu_154_p1),32));
    icmp_ln136_fu_177_p2 <= "1" when (unsigned(add_ln136_fu_171_p2) > unsigned(ap_const_lv15_3D00)) else "0";
    icmp_ln23_fu_142_p2 <= "1" when (i_fu_86 = ap_const_lv15_4000) else "0";
    img_out <= 
        ap_const_lv32_0 when (or_ln136_fu_257_p2(0) = '1') else 
        ap_const_lv32_FF;

    img_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            img_out_ap_vld <= ap_const_logic_1;
        else 
            img_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln136_1_fu_252_p2 <= (icmp_ln136_reg_297_pp0_iter18_reg or ap_phi_mux_phi_ln48_phi_fu_112_p4);
    or_ln136_fu_257_p2 <= (xor_ln48_reg_283 or or_ln136_1_fu_252_p2);
    tmp_fu_120_p3 <= threshold(31 downto 31);
    trunc_ln15_fu_188_p1 <= grp_fu_166_p2(15 - 1 downto 0);
    trunc_ln26_fu_154_p1 <= i_fu_86(14 - 1 downto 0);
    xor_ln48_fu_128_p2 <= (tmp_fu_120_p3 xor ap_const_lv1_1);
    zext_ln26_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln26_fu_154_p1),15));
end behav;
