// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fast_accel_fast_accel,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.655250,HLS_SYN_LAT=16404,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2717,HLS_SYN_LUT=2390,HLS_VERSION=2021_2}" *)

module fast_accel (
        ap_local_block,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state22 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

output   ap_local_block;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

wire   [0:0] ap_local_deadlock;
 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] img_in;
wire   [31:0] threshold;
wire   [31:0] img_out;
reg    img_out_ap_vld;
wire   [31:0] rows;
wire   [31:0] cols;
reg   [31:0] rows_read_reg_278;
wire   [0:0] xor_ln48_fu_128_p2;
reg   [0:0] xor_ln48_reg_283;
wire   [0:0] icmp_ln23_fu_142_p2;
reg   [0:0] icmp_ln23_reg_288;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln23_reg_288_pp0_iter1_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter2_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter3_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter4_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter5_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter6_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter7_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter8_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter9_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter10_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter11_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter12_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter13_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter14_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter15_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter16_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter17_reg;
reg   [0:0] icmp_ln23_reg_288_pp0_iter18_reg;
wire   [0:0] icmp_ln136_fu_177_p2;
reg   [0:0] icmp_ln136_reg_297;
reg   [0:0] icmp_ln136_reg_297_pp0_iter1_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter2_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter3_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter4_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter5_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter6_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter7_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter8_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter9_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter10_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter11_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter12_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter13_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter14_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter15_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter16_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter17_reg;
reg   [0:0] icmp_ln136_reg_297_pp0_iter18_reg;
wire   [0:0] empty_13_fu_192_p2;
reg   [0:0] empty_13_reg_302;
wire   [0:0] empty_14_fu_198_p2;
reg   [0:0] empty_14_reg_307;
wire   [0:0] empty_15_fu_204_p2;
reg   [0:0] empty_15_reg_312;
wire   [0:0] empty_17_fu_210_p2;
reg   [0:0] empty_17_reg_317;
wire   [0:0] empty_19_fu_216_p2;
reg   [0:0] empty_19_reg_322;
wire   [0:0] empty_21_fu_222_p2;
reg   [0:0] empty_21_reg_327;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg   [0:0] ap_phi_mux_phi_ln48_phi_fu_112_p4;
wire   [0:0] ap_phi_reg_pp0_iter19_phi_ln48_reg_109;
wire   [0:0] empty_23_fu_247_p2;
reg   [14:0] i_fu_86;
wire   [14:0] add_ln23_fu_148_p2;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_120_p3;
wire   [13:0] trunc_ln26_fu_154_p1;
wire   [14:0] grp_fu_166_p0;
wire   [14:0] zext_ln26_1_fu_162_p1;
wire   [14:0] add_ln136_fu_171_p2;
wire   [14:0] grp_fu_166_p2;
wire   [14:0] trunc_ln15_fu_188_p1;
wire   [0:0] empty_16_fu_228_p2;
wire   [0:0] empty_18_fu_232_p2;
wire   [0:0] empty_20_fu_237_p2;
wire   [0:0] empty_22_fu_242_p2;
wire   [0:0] or_ln136_1_fu_252_p2;
wire   [0:0] or_ln136_fu_257_p2;
wire    ap_CS_fsm_state22;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state22_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] grp_fu_166_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

fast_accel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .img_in(img_in),
    .threshold(threshold),
    .img_out(img_out),
    .img_out_ap_vld(img_out_ap_vld),
    .rows(rows),
    .cols(cols),
    .ap_local_deadlock(ap_local_deadlock)
);

fast_accel_srem_15ns_32ns_15_19_1 #(
    .ID( 1 ),
    .NUM_STAGE( 19 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 15 ))
srem_15ns_32ns_15_19_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_166_p0),
    .din1(rows_read_reg_278),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_86 <= 15'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln23_fu_142_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_fu_86 <= add_ln23_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_288_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_13_reg_302 <= empty_13_fu_192_p2;
        empty_14_reg_307 <= empty_14_fu_198_p2;
        empty_15_reg_312 <= empty_15_fu_204_p2;
        empty_17_reg_317 <= empty_17_fu_210_p2;
        empty_19_reg_322 <= empty_19_fu_216_p2;
        empty_21_reg_327 <= empty_21_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln23_fu_142_p2 == 1'd0))) begin
        icmp_ln136_reg_297 <= icmp_ln136_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln136_reg_297_pp0_iter10_reg <= icmp_ln136_reg_297_pp0_iter9_reg;
        icmp_ln136_reg_297_pp0_iter11_reg <= icmp_ln136_reg_297_pp0_iter10_reg;
        icmp_ln136_reg_297_pp0_iter12_reg <= icmp_ln136_reg_297_pp0_iter11_reg;
        icmp_ln136_reg_297_pp0_iter13_reg <= icmp_ln136_reg_297_pp0_iter12_reg;
        icmp_ln136_reg_297_pp0_iter14_reg <= icmp_ln136_reg_297_pp0_iter13_reg;
        icmp_ln136_reg_297_pp0_iter15_reg <= icmp_ln136_reg_297_pp0_iter14_reg;
        icmp_ln136_reg_297_pp0_iter16_reg <= icmp_ln136_reg_297_pp0_iter15_reg;
        icmp_ln136_reg_297_pp0_iter17_reg <= icmp_ln136_reg_297_pp0_iter16_reg;
        icmp_ln136_reg_297_pp0_iter18_reg <= icmp_ln136_reg_297_pp0_iter17_reg;
        icmp_ln136_reg_297_pp0_iter2_reg <= icmp_ln136_reg_297_pp0_iter1_reg;
        icmp_ln136_reg_297_pp0_iter3_reg <= icmp_ln136_reg_297_pp0_iter2_reg;
        icmp_ln136_reg_297_pp0_iter4_reg <= icmp_ln136_reg_297_pp0_iter3_reg;
        icmp_ln136_reg_297_pp0_iter5_reg <= icmp_ln136_reg_297_pp0_iter4_reg;
        icmp_ln136_reg_297_pp0_iter6_reg <= icmp_ln136_reg_297_pp0_iter5_reg;
        icmp_ln136_reg_297_pp0_iter7_reg <= icmp_ln136_reg_297_pp0_iter6_reg;
        icmp_ln136_reg_297_pp0_iter8_reg <= icmp_ln136_reg_297_pp0_iter7_reg;
        icmp_ln136_reg_297_pp0_iter9_reg <= icmp_ln136_reg_297_pp0_iter8_reg;
        icmp_ln23_reg_288_pp0_iter10_reg <= icmp_ln23_reg_288_pp0_iter9_reg;
        icmp_ln23_reg_288_pp0_iter11_reg <= icmp_ln23_reg_288_pp0_iter10_reg;
        icmp_ln23_reg_288_pp0_iter12_reg <= icmp_ln23_reg_288_pp0_iter11_reg;
        icmp_ln23_reg_288_pp0_iter13_reg <= icmp_ln23_reg_288_pp0_iter12_reg;
        icmp_ln23_reg_288_pp0_iter14_reg <= icmp_ln23_reg_288_pp0_iter13_reg;
        icmp_ln23_reg_288_pp0_iter15_reg <= icmp_ln23_reg_288_pp0_iter14_reg;
        icmp_ln23_reg_288_pp0_iter16_reg <= icmp_ln23_reg_288_pp0_iter15_reg;
        icmp_ln23_reg_288_pp0_iter17_reg <= icmp_ln23_reg_288_pp0_iter16_reg;
        icmp_ln23_reg_288_pp0_iter18_reg <= icmp_ln23_reg_288_pp0_iter17_reg;
        icmp_ln23_reg_288_pp0_iter2_reg <= icmp_ln23_reg_288_pp0_iter1_reg;
        icmp_ln23_reg_288_pp0_iter3_reg <= icmp_ln23_reg_288_pp0_iter2_reg;
        icmp_ln23_reg_288_pp0_iter4_reg <= icmp_ln23_reg_288_pp0_iter3_reg;
        icmp_ln23_reg_288_pp0_iter5_reg <= icmp_ln23_reg_288_pp0_iter4_reg;
        icmp_ln23_reg_288_pp0_iter6_reg <= icmp_ln23_reg_288_pp0_iter5_reg;
        icmp_ln23_reg_288_pp0_iter7_reg <= icmp_ln23_reg_288_pp0_iter6_reg;
        icmp_ln23_reg_288_pp0_iter8_reg <= icmp_ln23_reg_288_pp0_iter7_reg;
        icmp_ln23_reg_288_pp0_iter9_reg <= icmp_ln23_reg_288_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln136_reg_297_pp0_iter1_reg <= icmp_ln136_reg_297;
        icmp_ln23_reg_288 <= icmp_ln23_fu_142_p2;
        icmp_ln23_reg_288_pp0_iter1_reg <= icmp_ln23_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        rows_read_reg_278 <= rows;
        xor_ln48_reg_283 <= xor_ln48_fu_128_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state22_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln23_fu_142_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_reg_288_pp0_iter18_reg == 1'd0)) begin
        if ((empty_23_fu_247_p2 == 1'd1)) begin
            ap_phi_mux_phi_ln48_phi_fu_112_p4 = 1'd1;
        end else if ((empty_23_fu_247_p2 == 1'd0)) begin
            ap_phi_mux_phi_ln48_phi_fu_112_p4 = 1'd0;
        end else begin
            ap_phi_mux_phi_ln48_phi_fu_112_p4 = ap_phi_reg_pp0_iter19_phi_ln48_reg_109;
        end
    end else begin
        ap_phi_mux_phi_ln48_phi_fu_112_p4 = ap_phi_reg_pp0_iter19_phi_ln48_reg_109;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1))) begin
        img_out_ap_vld = 1'b1;
    end else begin
        img_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln23_fu_142_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1) & (ap_enable_reg_pp0_iter18 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter19 == 1'b1) & (ap_enable_reg_pp0_iter18 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln23_fu_142_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln136_fu_171_p2 = ($signed(zext_ln26_1_fu_162_p1) + $signed(15'd32384));

assign add_ln23_fu_148_p2 = (i_fu_86 + 15'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'd0;

assign ap_phi_reg_pp0_iter19_phi_ln48_reg_109 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign empty_13_fu_192_p2 = ((trunc_ln15_fu_188_p1 == 15'd127) ? 1'b1 : 1'b0);

assign empty_14_fu_198_p2 = ((trunc_ln15_fu_188_p1 == 15'd126) ? 1'b1 : 1'b0);

assign empty_15_fu_204_p2 = ((trunc_ln15_fu_188_p1 == 15'd125) ? 1'b1 : 1'b0);

assign empty_16_fu_228_p2 = (empty_14_reg_307 | empty_13_reg_302);

assign empty_17_fu_210_p2 = ((trunc_ln15_fu_188_p1 == 15'd2) ? 1'b1 : 1'b0);

assign empty_18_fu_232_p2 = (empty_16_fu_228_p2 | empty_15_reg_312);

assign empty_19_fu_216_p2 = ((trunc_ln15_fu_188_p1 == 15'd1) ? 1'b1 : 1'b0);

assign empty_20_fu_237_p2 = (empty_18_fu_232_p2 | empty_17_reg_317);

assign empty_21_fu_222_p2 = ((trunc_ln15_fu_188_p1 == 15'd0) ? 1'b1 : 1'b0);

assign empty_22_fu_242_p2 = (empty_20_fu_237_p2 | empty_19_reg_322);

assign empty_23_fu_247_p2 = (empty_22_fu_242_p2 | empty_21_reg_327);

assign grp_fu_166_p0 = grp_fu_166_p00;

assign grp_fu_166_p00 = trunc_ln26_fu_154_p1;

assign icmp_ln136_fu_177_p2 = ((add_ln136_fu_171_p2 > 15'd15616) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_142_p2 = ((i_fu_86 == 15'd16384) ? 1'b1 : 1'b0);

assign img_out = ((or_ln136_fu_257_p2[0:0] == 1'b1) ? 32'd0 : 32'd255);

assign or_ln136_1_fu_252_p2 = (icmp_ln136_reg_297_pp0_iter18_reg | ap_phi_mux_phi_ln48_phi_fu_112_p4);

assign or_ln136_fu_257_p2 = (xor_ln48_reg_283 | or_ln136_1_fu_252_p2);

assign tmp_fu_120_p3 = threshold[32'd31];

assign trunc_ln15_fu_188_p1 = grp_fu_166_p2[14:0];

assign trunc_ln26_fu_154_p1 = i_fu_86[13:0];

assign xor_ln48_fu_128_p2 = (tmp_fu_120_p3 ^ 1'd1);

assign zext_ln26_1_fu_162_p1 = trunc_ln26_fu_154_p1;

endmodule //fast_accel
