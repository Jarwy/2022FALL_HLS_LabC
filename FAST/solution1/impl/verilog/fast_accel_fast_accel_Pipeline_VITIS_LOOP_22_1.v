// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fast_accel_fast_accel_Pipeline_VITIS_LOOP_22_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        img_in,
        IMG_V_0_address0,
        IMG_V_0_ce0,
        IMG_V_0_we0,
        IMG_V_0_d0,
        IMG_V_1_address0,
        IMG_V_1_ce0,
        IMG_V_1_we0,
        IMG_V_1_d0,
        IMG_V_2_address0,
        IMG_V_2_ce0,
        IMG_V_2_we0,
        IMG_V_2_d0,
        IMG_V_3_address0,
        IMG_V_3_ce0,
        IMG_V_3_we0,
        IMG_V_3_d0,
        IMG_V_4_address0,
        IMG_V_4_ce0,
        IMG_V_4_we0,
        IMG_V_4_d0,
        IMG_V_5_address0,
        IMG_V_5_ce0,
        IMG_V_5_we0,
        IMG_V_5_d0,
        IMG_V_6_address0,
        IMG_V_6_ce0,
        IMG_V_6_we0,
        IMG_V_6_d0,
        IMG_V_7_address0,
        IMG_V_7_ce0,
        IMG_V_7_we0,
        IMG_V_7_d0,
        IMG_V_8_address0,
        IMG_V_8_ce0,
        IMG_V_8_we0,
        IMG_V_8_d0,
        IMG_V_9_address0,
        IMG_V_9_ce0,
        IMG_V_9_we0,
        IMG_V_9_d0,
        IMG_V_10_address0,
        IMG_V_10_ce0,
        IMG_V_10_we0,
        IMG_V_10_d0,
        IMG_V_11_address0,
        IMG_V_11_ce0,
        IMG_V_11_we0,
        IMG_V_11_d0,
        IMG_V_12_address0,
        IMG_V_12_ce0,
        IMG_V_12_we0,
        IMG_V_12_d0,
        IMG_V_13_address0,
        IMG_V_13_ce0,
        IMG_V_13_we0,
        IMG_V_13_d0,
        IMG_V_14_address0,
        IMG_V_14_ce0,
        IMG_V_14_we0,
        IMG_V_14_d0,
        IMG_V_15_address0,
        IMG_V_15_ce0,
        IMG_V_15_we0,
        IMG_V_15_d0,
        IMG_V_16_address0,
        IMG_V_16_ce0,
        IMG_V_16_we0,
        IMG_V_16_d0,
        IMG_V_17_address0,
        IMG_V_17_ce0,
        IMG_V_17_we0,
        IMG_V_17_d0,
        IMG_V_18_address0,
        IMG_V_18_ce0,
        IMG_V_18_we0,
        IMG_V_18_d0,
        IMG_V_19_address0,
        IMG_V_19_ce0,
        IMG_V_19_we0,
        IMG_V_19_d0,
        IMG_V_20_address0,
        IMG_V_20_ce0,
        IMG_V_20_we0,
        IMG_V_20_d0,
        IMG_V_21_address0,
        IMG_V_21_ce0,
        IMG_V_21_we0,
        IMG_V_21_d0,
        IMG_V_22_address0,
        IMG_V_22_ce0,
        IMG_V_22_we0,
        IMG_V_22_d0,
        IMG_V_23_address0,
        IMG_V_23_ce0,
        IMG_V_23_we0,
        IMG_V_23_d0,
        IMG_V_24_address0,
        IMG_V_24_ce0,
        IMG_V_24_we0,
        IMG_V_24_d0,
        IMG_V_25_address0,
        IMG_V_25_ce0,
        IMG_V_25_we0,
        IMG_V_25_d0,
        IMG_V_26_address0,
        IMG_V_26_ce0,
        IMG_V_26_we0,
        IMG_V_26_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [7:0] m_axi_gmem_WDATA;
output  [0:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [7:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [10:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] img_in;
output  [9:0] IMG_V_0_address0;
output   IMG_V_0_ce0;
output   IMG_V_0_we0;
output  [7:0] IMG_V_0_d0;
output  [9:0] IMG_V_1_address0;
output   IMG_V_1_ce0;
output   IMG_V_1_we0;
output  [7:0] IMG_V_1_d0;
output  [9:0] IMG_V_2_address0;
output   IMG_V_2_ce0;
output   IMG_V_2_we0;
output  [7:0] IMG_V_2_d0;
output  [9:0] IMG_V_3_address0;
output   IMG_V_3_ce0;
output   IMG_V_3_we0;
output  [7:0] IMG_V_3_d0;
output  [9:0] IMG_V_4_address0;
output   IMG_V_4_ce0;
output   IMG_V_4_we0;
output  [7:0] IMG_V_4_d0;
output  [9:0] IMG_V_5_address0;
output   IMG_V_5_ce0;
output   IMG_V_5_we0;
output  [7:0] IMG_V_5_d0;
output  [9:0] IMG_V_6_address0;
output   IMG_V_6_ce0;
output   IMG_V_6_we0;
output  [7:0] IMG_V_6_d0;
output  [9:0] IMG_V_7_address0;
output   IMG_V_7_ce0;
output   IMG_V_7_we0;
output  [7:0] IMG_V_7_d0;
output  [9:0] IMG_V_8_address0;
output   IMG_V_8_ce0;
output   IMG_V_8_we0;
output  [7:0] IMG_V_8_d0;
output  [9:0] IMG_V_9_address0;
output   IMG_V_9_ce0;
output   IMG_V_9_we0;
output  [7:0] IMG_V_9_d0;
output  [9:0] IMG_V_10_address0;
output   IMG_V_10_ce0;
output   IMG_V_10_we0;
output  [7:0] IMG_V_10_d0;
output  [9:0] IMG_V_11_address0;
output   IMG_V_11_ce0;
output   IMG_V_11_we0;
output  [7:0] IMG_V_11_d0;
output  [9:0] IMG_V_12_address0;
output   IMG_V_12_ce0;
output   IMG_V_12_we0;
output  [7:0] IMG_V_12_d0;
output  [9:0] IMG_V_13_address0;
output   IMG_V_13_ce0;
output   IMG_V_13_we0;
output  [7:0] IMG_V_13_d0;
output  [9:0] IMG_V_14_address0;
output   IMG_V_14_ce0;
output   IMG_V_14_we0;
output  [7:0] IMG_V_14_d0;
output  [9:0] IMG_V_15_address0;
output   IMG_V_15_ce0;
output   IMG_V_15_we0;
output  [7:0] IMG_V_15_d0;
output  [9:0] IMG_V_16_address0;
output   IMG_V_16_ce0;
output   IMG_V_16_we0;
output  [7:0] IMG_V_16_d0;
output  [9:0] IMG_V_17_address0;
output   IMG_V_17_ce0;
output   IMG_V_17_we0;
output  [7:0] IMG_V_17_d0;
output  [9:0] IMG_V_18_address0;
output   IMG_V_18_ce0;
output   IMG_V_18_we0;
output  [7:0] IMG_V_18_d0;
output  [9:0] IMG_V_19_address0;
output   IMG_V_19_ce0;
output   IMG_V_19_we0;
output  [7:0] IMG_V_19_d0;
output  [9:0] IMG_V_20_address0;
output   IMG_V_20_ce0;
output   IMG_V_20_we0;
output  [7:0] IMG_V_20_d0;
output  [9:0] IMG_V_21_address0;
output   IMG_V_21_ce0;
output   IMG_V_21_we0;
output  [7:0] IMG_V_21_d0;
output  [9:0] IMG_V_22_address0;
output   IMG_V_22_ce0;
output   IMG_V_22_we0;
output  [7:0] IMG_V_22_d0;
output  [9:0] IMG_V_23_address0;
output   IMG_V_23_ce0;
output   IMG_V_23_we0;
output  [7:0] IMG_V_23_d0;
output  [9:0] IMG_V_24_address0;
output   IMG_V_24_ce0;
output   IMG_V_24_we0;
output  [7:0] IMG_V_24_d0;
output  [9:0] IMG_V_25_address0;
output   IMG_V_25_ce0;
output   IMG_V_25_we0;
output  [7:0] IMG_V_25_d0;
output  [9:0] IMG_V_26_address0;
output   IMG_V_26_ce0;
output   IMG_V_26_we0;
output  [7:0] IMG_V_26_d0;

reg ap_idle;
reg m_axi_gmem_RREADY;
reg IMG_V_0_ce0;
reg IMG_V_0_we0;
reg IMG_V_1_ce0;
reg IMG_V_1_we0;
reg IMG_V_2_ce0;
reg IMG_V_2_we0;
reg IMG_V_3_ce0;
reg IMG_V_3_we0;
reg IMG_V_4_ce0;
reg IMG_V_4_we0;
reg IMG_V_5_ce0;
reg IMG_V_5_we0;
reg IMG_V_6_ce0;
reg IMG_V_6_we0;
reg IMG_V_7_ce0;
reg IMG_V_7_we0;
reg IMG_V_8_ce0;
reg IMG_V_8_we0;
reg IMG_V_9_ce0;
reg IMG_V_9_we0;
reg IMG_V_10_ce0;
reg IMG_V_10_we0;
reg IMG_V_11_ce0;
reg IMG_V_11_we0;
reg IMG_V_12_ce0;
reg IMG_V_12_we0;
reg IMG_V_13_ce0;
reg IMG_V_13_we0;
reg IMG_V_14_ce0;
reg IMG_V_14_we0;
reg IMG_V_15_ce0;
reg IMG_V_15_we0;
reg IMG_V_16_ce0;
reg IMG_V_16_we0;
reg IMG_V_17_ce0;
reg IMG_V_17_we0;
reg IMG_V_18_ce0;
reg IMG_V_18_we0;
reg IMG_V_19_ce0;
reg IMG_V_19_we0;
reg IMG_V_20_ce0;
reg IMG_V_20_we0;
reg IMG_V_21_ce0;
reg IMG_V_21_we0;
reg IMG_V_22_ce0;
reg IMG_V_22_we0;
reg IMG_V_23_ce0;
reg IMG_V_23_we0;
reg IMG_V_24_ce0;
reg IMG_V_24_we0;
reg IMG_V_25_ce0;
reg IMG_V_25_we0;
reg IMG_V_26_ce0;
reg IMG_V_26_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_fu_564_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] trunc_ln24_fu_584_p1;
reg   [4:0] trunc_ln24_reg_702;
reg   [7:0] gmem_addr_read_reg_706;
wire   [63:0] zext_ln24_fu_635_p1;
reg   [14:0] phi_urem_fu_166;
wire   [14:0] select_ln22_fu_603_p3;
wire    ap_loop_init;
reg   [29:0] phi_mul_fu_170;
wire   [29:0] add_ln24_fu_619_p2;
reg   [14:0] i_V_fu_174;
wire   [14:0] i_V_4_fu_570_p2;
reg   [14:0] ap_sig_allocacmp_i_V_3;
wire   [14:0] add_ln22_fu_591_p2;
wire   [0:0] icmp_ln22_fu_597_p2;
wire   [9:0] tmp_fu_625_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fast_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln1072_fu_564_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_V_fu_174 <= i_V_4_fu_570_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_V_fu_174 <= 15'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            phi_mul_fu_170 <= 30'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            phi_mul_fu_170 <= add_ln24_fu_619_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_urem_fu_166 <= 15'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            phi_urem_fu_166 <= select_ln22_fu_603_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        gmem_addr_read_reg_706 <= m_axi_gmem_RDATA;
        trunc_ln24_reg_702 <= trunc_ln24_fu_584_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_0_ce0 = 1'b1;
    end else begin
        IMG_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_0_we0 = 1'b1;
    end else begin
        IMG_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_10_ce0 = 1'b1;
    end else begin
        IMG_V_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd10) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_10_we0 = 1'b1;
    end else begin
        IMG_V_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_11_ce0 = 1'b1;
    end else begin
        IMG_V_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd11) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_11_we0 = 1'b1;
    end else begin
        IMG_V_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_12_ce0 = 1'b1;
    end else begin
        IMG_V_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd12) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_12_we0 = 1'b1;
    end else begin
        IMG_V_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_13_ce0 = 1'b1;
    end else begin
        IMG_V_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd13) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_13_we0 = 1'b1;
    end else begin
        IMG_V_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_14_ce0 = 1'b1;
    end else begin
        IMG_V_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd14) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_14_we0 = 1'b1;
    end else begin
        IMG_V_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_15_ce0 = 1'b1;
    end else begin
        IMG_V_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd15) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_15_we0 = 1'b1;
    end else begin
        IMG_V_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_16_ce0 = 1'b1;
    end else begin
        IMG_V_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd16) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_16_we0 = 1'b1;
    end else begin
        IMG_V_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_17_ce0 = 1'b1;
    end else begin
        IMG_V_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd17) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_17_we0 = 1'b1;
    end else begin
        IMG_V_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_18_ce0 = 1'b1;
    end else begin
        IMG_V_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd18) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_18_we0 = 1'b1;
    end else begin
        IMG_V_18_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_19_ce0 = 1'b1;
    end else begin
        IMG_V_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd19) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_19_we0 = 1'b1;
    end else begin
        IMG_V_19_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_1_ce0 = 1'b1;
    end else begin
        IMG_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_1_we0 = 1'b1;
    end else begin
        IMG_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_20_ce0 = 1'b1;
    end else begin
        IMG_V_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd20) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_20_we0 = 1'b1;
    end else begin
        IMG_V_20_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_21_ce0 = 1'b1;
    end else begin
        IMG_V_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd21) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_21_we0 = 1'b1;
    end else begin
        IMG_V_21_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_22_ce0 = 1'b1;
    end else begin
        IMG_V_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd22) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_22_we0 = 1'b1;
    end else begin
        IMG_V_22_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_23_ce0 = 1'b1;
    end else begin
        IMG_V_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd23) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_23_we0 = 1'b1;
    end else begin
        IMG_V_23_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_24_ce0 = 1'b1;
    end else begin
        IMG_V_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd24) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_24_we0 = 1'b1;
    end else begin
        IMG_V_24_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_25_ce0 = 1'b1;
    end else begin
        IMG_V_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd25) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_25_we0 = 1'b1;
    end else begin
        IMG_V_25_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_26_ce0 = 1'b1;
    end else begin
        IMG_V_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & ((trunc_ln24_reg_702 == 5'd26) | ((trunc_ln24_reg_702 == 5'd27) | ((trunc_ln24_reg_702 == 5'd28) | ((trunc_ln24_reg_702 == 5'd29) | ((trunc_ln24_reg_702 == 5'd30) | (trunc_ln24_reg_702 == 5'd31)))))))) begin
        IMG_V_26_we0 = 1'b1;
    end else begin
        IMG_V_26_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_2_ce0 = 1'b1;
    end else begin
        IMG_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_2_we0 = 1'b1;
    end else begin
        IMG_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_3_ce0 = 1'b1;
    end else begin
        IMG_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_3_we0 = 1'b1;
    end else begin
        IMG_V_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_4_ce0 = 1'b1;
    end else begin
        IMG_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd4) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_4_we0 = 1'b1;
    end else begin
        IMG_V_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_5_ce0 = 1'b1;
    end else begin
        IMG_V_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd5) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_5_we0 = 1'b1;
    end else begin
        IMG_V_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_6_ce0 = 1'b1;
    end else begin
        IMG_V_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd6) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_6_we0 = 1'b1;
    end else begin
        IMG_V_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_7_ce0 = 1'b1;
    end else begin
        IMG_V_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd7) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_7_we0 = 1'b1;
    end else begin
        IMG_V_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_8_ce0 = 1'b1;
    end else begin
        IMG_V_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd8) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_8_we0 = 1'b1;
    end else begin
        IMG_V_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_9_ce0 = 1'b1;
    end else begin
        IMG_V_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln24_reg_702 == 5'd9) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        IMG_V_9_we0 = 1'b1;
    end else begin
        IMG_V_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_fu_564_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_V_3 = 15'd0;
    end else begin
        ap_sig_allocacmp_i_V_3 = i_V_fu_174;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign IMG_V_0_address0 = zext_ln24_fu_635_p1;

assign IMG_V_0_d0 = gmem_addr_read_reg_706;

assign IMG_V_10_address0 = zext_ln24_fu_635_p1;

assign IMG_V_10_d0 = gmem_addr_read_reg_706;

assign IMG_V_11_address0 = zext_ln24_fu_635_p1;

assign IMG_V_11_d0 = gmem_addr_read_reg_706;

assign IMG_V_12_address0 = zext_ln24_fu_635_p1;

assign IMG_V_12_d0 = gmem_addr_read_reg_706;

assign IMG_V_13_address0 = zext_ln24_fu_635_p1;

assign IMG_V_13_d0 = gmem_addr_read_reg_706;

assign IMG_V_14_address0 = zext_ln24_fu_635_p1;

assign IMG_V_14_d0 = gmem_addr_read_reg_706;

assign IMG_V_15_address0 = zext_ln24_fu_635_p1;

assign IMG_V_15_d0 = gmem_addr_read_reg_706;

assign IMG_V_16_address0 = zext_ln24_fu_635_p1;

assign IMG_V_16_d0 = gmem_addr_read_reg_706;

assign IMG_V_17_address0 = zext_ln24_fu_635_p1;

assign IMG_V_17_d0 = gmem_addr_read_reg_706;

assign IMG_V_18_address0 = zext_ln24_fu_635_p1;

assign IMG_V_18_d0 = gmem_addr_read_reg_706;

assign IMG_V_19_address0 = zext_ln24_fu_635_p1;

assign IMG_V_19_d0 = gmem_addr_read_reg_706;

assign IMG_V_1_address0 = zext_ln24_fu_635_p1;

assign IMG_V_1_d0 = gmem_addr_read_reg_706;

assign IMG_V_20_address0 = zext_ln24_fu_635_p1;

assign IMG_V_20_d0 = gmem_addr_read_reg_706;

assign IMG_V_21_address0 = zext_ln24_fu_635_p1;

assign IMG_V_21_d0 = gmem_addr_read_reg_706;

assign IMG_V_22_address0 = zext_ln24_fu_635_p1;

assign IMG_V_22_d0 = gmem_addr_read_reg_706;

assign IMG_V_23_address0 = zext_ln24_fu_635_p1;

assign IMG_V_23_d0 = gmem_addr_read_reg_706;

assign IMG_V_24_address0 = zext_ln24_fu_635_p1;

assign IMG_V_24_d0 = gmem_addr_read_reg_706;

assign IMG_V_25_address0 = zext_ln24_fu_635_p1;

assign IMG_V_25_d0 = gmem_addr_read_reg_706;

assign IMG_V_26_address0 = zext_ln24_fu_635_p1;

assign IMG_V_26_d0 = gmem_addr_read_reg_706;

assign IMG_V_2_address0 = zext_ln24_fu_635_p1;

assign IMG_V_2_d0 = gmem_addr_read_reg_706;

assign IMG_V_3_address0 = zext_ln24_fu_635_p1;

assign IMG_V_3_d0 = gmem_addr_read_reg_706;

assign IMG_V_4_address0 = zext_ln24_fu_635_p1;

assign IMG_V_4_d0 = gmem_addr_read_reg_706;

assign IMG_V_5_address0 = zext_ln24_fu_635_p1;

assign IMG_V_5_d0 = gmem_addr_read_reg_706;

assign IMG_V_6_address0 = zext_ln24_fu_635_p1;

assign IMG_V_6_d0 = gmem_addr_read_reg_706;

assign IMG_V_7_address0 = zext_ln24_fu_635_p1;

assign IMG_V_7_d0 = gmem_addr_read_reg_706;

assign IMG_V_8_address0 = zext_ln24_fu_635_p1;

assign IMG_V_8_d0 = gmem_addr_read_reg_706;

assign IMG_V_9_address0 = zext_ln24_fu_635_p1;

assign IMG_V_9_d0 = gmem_addr_read_reg_706;

assign add_ln22_fu_591_p2 = (phi_urem_fu_166 + 15'd1);

assign add_ln24_fu_619_p2 = (phi_mul_fu_170 + 30'd38837);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_gmem_RVALID == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_V_4_fu_570_p2 = (ap_sig_allocacmp_i_V_3 + 15'd1);

assign icmp_ln1072_fu_564_p2 = ((ap_sig_allocacmp_i_V_3 == 15'd16384) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_597_p2 = ((add_ln22_fu_591_p2 < 15'd27) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 8'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 1'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign select_ln22_fu_603_p3 = ((icmp_ln22_fu_597_p2[0:0] == 1'b1) ? add_ln22_fu_591_p2 : 15'd0);

assign tmp_fu_625_p4 = {{phi_mul_fu_170[29:20]}};

assign trunc_ln24_fu_584_p1 = phi_urem_fu_166[4:0];

assign zext_ln24_fu_635_p1 = tmp_fu_625_p4;

endmodule //fast_accel_fast_accel_Pipeline_VITIS_LOOP_22_1
