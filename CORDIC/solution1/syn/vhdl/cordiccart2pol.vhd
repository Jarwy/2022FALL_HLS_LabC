-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordiccart2pol is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_local_block : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of cordiccart2pol is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordiccart2pol_cordiccart2pol,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.870000,HLS_SYN_LAT=23,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=282,HLS_SYN_LUT=687,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_E6DE : STD_LOGIC_VECTOR (15 downto 0) := "1110011011011110";
    constant ap_const_lv16_1921 : STD_LOGIC_VECTOR (15 downto 0) := "0001100100100001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv28_9B7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100110110111";

    signal ap_local_deadlock : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x : STD_LOGIC_VECTOR (15 downto 0);
    signal y : STD_LOGIC_VECTOR (15 downto 0);
    signal r : STD_LOGIC_VECTOR (15 downto 0);
    signal r_ap_vld : STD_LOGIC;
    signal theta : STD_LOGIC_VECTOR (15 downto 0);
    signal theta_ap_vld : STD_LOGIC;
    signal y_read_reg_193 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_V_fu_126_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_V_reg_210 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_5_fu_135_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_5_reg_215 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_idle : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_ready : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_p_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_p_out_ap_vld : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_x_V_2_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_x_V_2_out_ap_vld : STD_LOGIC;
    signal grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_fu_106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_fu_114_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_fu_120_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_158_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_29_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        y_V_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        temp_V : IN STD_LOGIC_VECTOR (15 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_out_ap_vld : OUT STD_LOGIC;
        x_V_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        x_V_2_out_ap_vld : OUT STD_LOGIC );
    end component;


    component cordiccart2pol_mul_mul_16s_12ns_28_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component cordiccart2pol_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        x : OUT STD_LOGIC_VECTOR (15 downto 0);
        y : OUT STD_LOGIC_VECTOR (15 downto 0);
        r : IN STD_LOGIC_VECTOR (15 downto 0);
        r_ap_vld : IN STD_LOGIC;
        theta : IN STD_LOGIC_VECTOR (15 downto 0);
        theta_ap_vld : IN STD_LOGIC;
        ap_local_deadlock : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96 : component cordiccart2pol_cordiccart2pol_Pipeline_VITIS_LOOP_29_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start,
        ap_done => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done,
        ap_idle => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_idle,
        ap_ready => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_ready,
        y_V_1 => y_V_5_reg_215,
        temp_V => temp_V_reg_210,
        p_out => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_p_out,
        p_out_ap_vld => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_p_out_ap_vld,
        x_V_2_out => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_x_V_2_out,
        x_V_2_out_ap_vld => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_x_V_2_out_ap_vld);

    control_s_axi_U : component cordiccart2pol_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        x => x,
        y => y,
        r => r,
        r_ap_vld => r_ap_vld,
        theta => theta,
        theta_ap_vld => theta_ap_vld,
        ap_local_deadlock => ap_local_deadlock);

    mul_mul_16s_12ns_28_4_1_U6 : component cordiccart2pol_mul_mul_16s_12ns_28_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_x_V_2_out,
        din1 => grp_fu_186_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                temp_V_reg_210 <= temp_V_fu_126_p3;
                y_V_5_reg_215 <= y_V_5_fu_135_p3;
                y_read_reg_193 <= y;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done)
    begin
        if ((grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_lv1_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start <= grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_ap_start_reg;
    grp_fu_186_p1 <= ap_const_lv28_9B7(12 - 1 downto 0);
    r <= grp_fu_186_p2(27 downto 12);

    r_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            r_ap_vld <= ap_const_logic_1;
        else 
            r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_fu_158_p3 <= 
        ap_const_lv16_E6DE when (tmp_1_fu_151_p3(0) = '1') else 
        ap_const_lv16_1921;
    temp_V_fu_126_p3 <= 
        x_V_fu_114_p2 when (tmp_fu_106_p3(0) = '1') else 
        y;
    theta <= std_logic_vector(unsigned(grp_cordiccart2pol_Pipeline_VITIS_LOOP_29_1_fu_96_p_out) + unsigned(select_ln19_fu_158_p3));

    theta_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            theta_ap_vld <= ap_const_logic_1;
        else 
            theta_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_151_p3 <= y_read_reg_193(15 downto 15);
    tmp_fu_106_p3 <= y(15 downto 15);
    x_V_fu_114_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(y));
    y_V_5_fu_135_p3 <= 
        x when (tmp_fu_106_p3(0) = '1') else 
        y_V_fu_120_p2;
    y_V_fu_120_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(x));
end behav;
